services:
  # Configuration Service
  config-service:
    build: ./config-service
    container_name: config-service
    ports:
      - "8888:8888"
    volumes:
      - ./config-service/target/config-service-0.0.1-SNAPSHOT.jar:/app/app.jar
      - ./config-service/src/main/resources/config:/app/config
    working_dir: /app
    command: java -jar app.jar
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      consul:
        condition: service_started
      user-service:
        condition: service_healthy
    networks:
      - msa-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
      - SPRING_PROFILES_ACTIVE=docker

  # Campaign Service
  campaign-service:
    build: ./campaign-service
    container_name: campaign-service
    ports:
      - "8081:8081"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      campaign-db:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
      - CAMPAIGN_DB_HOST=campaign-db
      - CAMPAIGN_DB_PORT=3308

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8082:8082"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      user-db:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
      - USER_DB_HOST=user-db
      - USER_DB_PORT=3309
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ad Service
  ad-service:
    build: ./ad-service
    container_name: ad-service
    ports:
      - "8083:8083"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      ad-db:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
      - AD_DB_HOST=ad-db
      - AD_DB_PORT=3307

  # Publisher Service
  publisher-service:
    build: ./publisher-service
    container_name: publisher-service
    ports:
      - "8084:8084"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      publisher-db:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
      - PUBLISHER_DB_HOST=publisher-db
      - PUBLISHER_DB_PORT=3310

  # MySQL Database (통합)
  mysql:
    image: mysql:8.0
    container_name: demo-mysql-1
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: msa
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docs/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docs/sql:/docker-entrypoint-initdb.d/sql
    networks:
      - msa-network

  # Ad DB
  ad-db:
    image: mysql:8.0
    container_name: demo-ad-db-1
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ad_db
    ports:
      - "3307:3306"
    volumes:
      - ./docs/sql/init-ad-db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docs/sql:/docker-entrypoint-initdb.d/sql
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 10

  campaign-db:
    image: mysql:8.0
    container_name: demo-campaign-db-1
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: campaign_db
    ports:
      - "3308:3306"
    volumes:
      - ./docs/sql/init-campaign-db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docs/sql:/docker-entrypoint-initdb.d/sql
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 10

  publisher-db:
    image: mysql:8.0
    container_name: demo-publisher-db-1
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: publisher_db
    ports:
      - "3309:3306"
    volumes:
      - ./docs/sql/init-publisher-db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docs/sql:/docker-entrypoint-initdb.d/sql
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 10

  # User DB
  user-db:
    image: mysql:8.0
    container_name: demo-user-db-1
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: userdb
    ports:
      - "3310:3306"
    volumes:
      - ./docs/sql/init-user-db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docs/sql:/docker-entrypoint-initdb.d/sql
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Consul for Service Discovery
  consul:
    image: consul:1.15
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: consul agent -server -bootstrap-expect=1 -ui -client=0.0.0.0 -data-dir=/consul/data
    volumes:
      - consul-data:/consul/data
    networks:
      - msa-network

  jwks-service:
    build: ./jwks-service
    container_name: jwks-service
    ports:
      - "8090:8090"
    working_dir: /app
    command: java -jar app.jar
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/oauth2/jwks"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Data Collector Service
  data-collector-service:
    build: ./data-collector-service
    container_name: data-collector-service
    ports:
      - "8085:8085"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_REDIS_HOST=redis
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Data Processor Service
  data-processor-service:
    build: ./data-processor-service
    container_name: data-processor-service
    ports:
      - "8086:8086"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_REDIS_HOST=redis
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ad Recommendation Service
  ad-recommendation-service:
    build: ./ad-recommendation-service
    container_name: ad-recommendation-service
    ports:
      - "8087:8087"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Batch Processing Service
  batch-processing-service:
    build: ./batch-processing-service
    container_name: batch-processing-service
    ports:
      - "8088:8088"
    working_dir: /app
    command: java -jar app.jar
    depends_on:
      config-service:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - msa-network
    environment:
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVICE_HOST=config-service
      - CONFIG_SERVICE_PORT=8888
      - JWKS_SERVICE_HOST=jwks-service
      - JWKS_SERVICE_PORT=8090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Hadoop NameNode
  hadoop-namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-namenode
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      - CLUSTER_NAME=advertising-cluster
    volumes:
      - hadoop-namenode:/hadoop/dfs/name
    networks:
      - msa-network

  # Hadoop DataNode
  hadoop-datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-datanode
    depends_on:
      - hadoop-namenode
    environment:
      - SERVICE_PRECONDITION=hadoop-namenode:9870
    volumes:
      - hadoop-datanode:/hadoop/dfs/data
    networks:
      - msa-network

  # Spark Master
  spark-master:
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    ports:
      - "8093:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
      - spark-master:/headless
    networks:
      - msa-network

  # Spark Worker
  spark-worker:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_EXECUTOR_MEMORY=2g
      - SPARK_DRIVER_MEMORY=1g
      - SPARK_DATA_INPUT_PATH=/opt/data/ad-events
      - SPARK_DATA_OUTPUT_PATH=/opt/data/results
    volumes:
      - spark-worker:/headless
    networks:
      - msa-network

  # Flink JobManager
  flink-jobmanager:
    image: flink:1.18.1
    container_name: flink-jobmanager
    ports:
      - "8091:8081"
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address:flink-jobmanager
    command: jobmanager
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.18.1
    container_name: flink-taskmanager
    depends_on:
      flink-jobmanager:
        condition: service_healthy
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address:flink-jobmanager;taskmanager.numberOfTaskSlots:2;taskmanager.memory.process.size:2048m;taskmanager.memory.managed.size:512m;taskmanager.maxRegistrationDuration:5 min
      - FLINK_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - FLINK_KAFKA_TOPIC_AD_EVENTS=ad-events
      - FLINK_KAFKA_GROUP_ID=flink-ad-processor
      - FLINK_KAFKA_TOPIC_AD_CLICKS=ad-clicks
      - FLINK_KAFKA_TOPIC_AD_IMPRESSIONS=ad-impressions
      - FLINK_KAFKA_CLICK_GROUP_ID=flink-click-processor
      - FLINK_KAFKA_IMPRESSION_GROUP_ID=flink-impression-processor
    command: taskmanager
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./flink-apps/target:/opt/flink/usrlib

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=0S58ImIOSZuJok-yz94fCA
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - msa-network

volumes:
  mysql-data:
  consul-data:
  hadoop-namenode:
  hadoop-datanode:
  spark-master:
  spark-worker:

networks:
  msa-network:
    driver: bridge 